[
    {
        "id": "A01:2021",
        "name": "Broken Access Control",
        "link": "https://owasp.org/Top10/A01_2021-Broken_Access_Control/",
        "hints": [
            "This category had the most occurrences of CWEs in applications tested.",
            "On average, 3.81% of applications tested had one or more CWEs in this category.",
            "This risk category had more than 318k occurrences of CWEs.",
            "34 CWEs are mapped to this category.",
            "This category moved up from the fifth position in the previous edition."
        ]
    },
    {
        "id": "A02:2021",
        "name": "Cryptographic Failures",
        "link": "https://owasp.org/Top10/A02_2021-Cryptographic_Failures/",
        "hints": [
            "This category was previously known as 'Sensitive Data Exposure'.",
            "The new name focuses on failures related to cryptography.",
            "This category often leads to sensitive data exposure or system compromise.",
            "It shifted up one position from the previous edition.",
            "The previous name was considered too broad and a symptom rather than a root cause."
        ]
    },
    {
        "id": "A03:2021",
        "name": "Injection",
        "link": "https://owasp.org/Top10/A03_2021-Injection/",
        "hints": [
            "94% of applications were tested for some form of this vulnerability.",
            "The maximum incidence rate for this vulnerability was 19%.",
            "The average incidence rate was 3.37%.",
            "33 CWEs are mapped to this category.",
            "Cross-site Scripting is now part of this category in this edition."
        ]
    },
    {
        "id": "A04:2021",
        "name": "Insecure Design",
        "link": "https://owasp.org/Top10/A04_2021-Insecure_Design/",
        "hints": [
            "This is a new category for 2021.",
            "It focuses on risks related to design flaws.",
            "This category emphasizes the need for threat modeling and secure design patterns.",
            "An insecure design cannot be fixed by perfect implementation alone.",
            "This category represents a shift towards 'moving left' in the development process."
        ]
    },
    {
        "id": "A05:2021",
        "name": "Security Misconfiguration",
        "link": "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
        "hints": [
            "This category moved up from #6 in the previous edition.",
            "90% of applications were tested for some form of this issue.",
            "The average incidence rate was 4.5%.",
            "Over 208k occurrences of CWEs were mapped to this risk category.",
            "The former category for XML External Entities (XXE) is now part of this risk category."
        ]
    },
    {
        "id": "A06:2021",
        "name": "Vulnerable and Outdated Components",
        "link": "https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/",
        "hints": [
            "This category was previously titled 'Using Components with Known Vulnerabilities'.",
            "It moved up from #9 in the 2017 edition.",
            "This is a known issue that's difficult to test and assess risk for.",
            "It's the only category without CVEs mapped to the included CWEs.",
            "Default exploit and impact weights of 5.0 are factored into the scores for this category."
        ]
    },
    {
        "id": "A07:2021",
        "name": "Identification and Authentication Failures",
        "link": "https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/",
        "hints": [
            "This category was previously called 'Broken Authentication'.",
            "It slid down from the second position in the previous edition.",
            "This category now includes CWEs more related to identification failures.",
            "The increased availability of standardized frameworks seems to be helping mitigate these issues.",
            "Despite sliding down, this category remains an integral part of the Top 10."
        ]
    },
    {
        "id": "A08:2021",
        "name": "Software and Data Integrity Failures",
        "link": "https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/",
        "hints": [
            "This is a new category for 2021.",
            "It focuses on making assumptions related to software updates, critical data, and CI/CD pipelines.",
            "This category had one of the highest weighted impacts from CVE/CVSS data.",
            "10 CWEs are mapped to this category.",
            "The previous A8:2017-Insecure Deserialization is now part of this larger category."
        ]
    },
    {
        "id": "A09:2021",
        "name": "Security Logging and Monitoring Failures",
        "link": "https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/",
        "hints": [
            "This category was previously called 'Insufficient Logging & Monitoring'.",
            "It moved up from #10 in the previous edition.",
            "This category is challenging to test for.",
            "Failures in this category can directly impact visibility, incident alerting, and forensics.",
            "This category isn't well represented in the CVE/CVSS data."
        ]
    },
    {
        "id": "A10:2021",
        "name": "Server-Side Request Forgery",
        "link": "https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/",
        "hints": [
            "This category was added based on the Top 10 community survey.",
            "It shows a relatively low incidence rate with above-average testing coverage.",
            "This vulnerability has above-average ratings for Exploit and Impact potential.",
            "The security community emphasized the importance of this category.",
            "This category represents an emerging threat that may not be fully represented in current data."
        ]
    },
    {
        "id": "M01:2024",
        "name": "Improper Credential Usage",
        "link": "https://owasp.org/www-project-mobile-top-10/2023-risks/m1-improper-credential-usage.html",
        "hints": [
            "This risk involves the insecure handling of credentials, such as hardcoding them in the application.",
            "Developers may mistakenly store sensitive credentials in shared preferences or local storage.",
            "Using weak or easily guessable passwords can lead to unauthorized access.",
            "Attackers might exploit improperly stored credentials to gain elevated privileges.",
            "Regularly rotating credentials and avoiding hardcoding them can mitigate this risk."
        ]
    },
    {
        "id": "M02:2024",
        "name": "Inadequate Supply Chain Security",
        "link": "https://owasp.org/www-project-mobile-top-10/2023-risks/m2-inadequate-supply-chain-security.html",
        "hints": [
            "This risk arises from using vulnerable third-party components in mobile applications.",
            "Compromised supply chains can lead to the introduction of malware or backdoors.",
            "Regular updates and thorough vetting of third-party libraries can mitigate this risk.",
            "Using components with known vulnerabilities can put the entire app at risk.",
            "Supply chain attacks have become increasingly common in recent years."
        ]
    },
    {
        "id": "M03:2024",
        "name": "Insecure Authentication/Authorization",
        "link": "https://owasp.org/www-project-mobile-top-10/2023-risks/m3-insecure-authentication-authorization.html",
        "hints": [
            "This risk often involves weak authentication mechanisms that attackers can easily bypass.",
            "Inadequate session management can lead to unauthorized access.",
            "Using outdated authentication protocols can expose the application to attacks.",
            "Ensuring that strong multi-factor authentication is implemented can reduce this risk.",
            "Improperly configured authorization can allow users to access unauthorized resources."
        ]
    },
    {
        "id": "M04:2024",
        "name": "Insufficient Input/Output Validation",
        "link": "https://owasp.org/www-project-mobile-top-10/2023-risks/m4-insufficient-input-output-validation.html",
        "hints": [
            "This risk involves failing to properly validate user input, leading to injection attacks.",
            "Inadequate output encoding can result in data leakage or script injection.",
            "Implementing proper input sanitation techniques can help mitigate this risk.",
            "User inputs should be considered untrusted and validated against strict criteria.",
            "Failure to handle input validation can lead to various types of injection attacks."
        ]
    },
    {
        "id": "M05:2024",
        "name": "Insecure Communication",
        "link": "https://owasp.org/www-project-mobile-top-10/2023-risks/m5-insecure-communication.html",
        "hints": [
            "This risk involves transmitting sensitive data over unsecured or weakly encrypted channels.",
            "Using outdated SSL/TLS versions can make communications vulnerable to interception.",
            "Data transmitted over public networks should always be encrypted using strong protocols.",
            "Failure to verify server certificates can result in man-in-the-middle attacks.",
            "Encrypting both data in transit and at rest is crucial for mobile security."
        ]
    },
    {
        "id": "M06:2024",
        "name": "Inadequate Privacy Controls",
        "link": "https://owasp.org/www-project-mobile-top-10/2023-risks/m6-inadequate-privacy-controls.html",
        "hints": [
            "This risk involves the mishandling of personal data, leading to privacy violations.",
            "Lack of proper consent management can result in regulatory compliance issues.",
            "Applications should limit data collection to the minimum necessary for functionality.",
            "Storing excessive or unnecessary personal data increases the risk of breaches.",
            "Implementing robust data minimization and retention policies can mitigate this risk."
        ]
    },
    {
        "id": "M07:2024",
        "name": "Insufficient Binary Protections",
        "link": "https://owasp.org/www-project-mobile-top-10/2023-risks/m7-insufficient-binary-protection.html",
        "hints": [
            "This risk involves a lack of protections against reverse engineering and tampering.",
            "Attackers may exploit vulnerabilities in binaries to inject malicious code.",
            "Implementing obfuscation and binary protection techniques can mitigate this risk.",
            "Mobile applications should be hardened to resist reverse engineering attempts.",
            "Binary protections can prevent attackers from modifying application code or logic."
        ]
    },
    {
        "id": "M08:2024",
        "name": "Security Misconfiguration",
        "link": "https://owasp.org/www-project-mobile-top-10/2023-risks/m8-security-misconfiguration.html",
        "hints": [
            "This risk arises from insecure default configurations or exposed debugging information.",
            "Leaving unnecessary services enabled can increase the attack surface.",
            "Ensuring that only necessary permissions and services are enabled can reduce this risk.",
            "Inadequate error handling can expose sensitive system information to attackers.",
            "Regularly auditing and updating configurations can prevent security misconfigurations."
        ]
    },
    {
        "id": "M09:2024",
        "name": "Insecure Data Storage",
        "link": "https://owasp.org/www-project-mobile-top-10/2023-risks/m9-insecure-data-storage.html",
        "hints": [
            "This risk involves storing sensitive data in an unencrypted or poorly protected manner.",
            "Data stored in cleartext can be easily accessed if the device is compromised.",
            "Using secure storage mechanisms provided by the platform can mitigate this risk.",
            "Applications should avoid storing sensitive data on the device unless necessary.",
            "Insecure storage can lead to unauthorized access and data breaches."
        ]
    },
    {
        "id": "M10:2024",
        "name": "Insufficient Cryptography",
        "link": "https://owasp.org/www-project-mobile-top-10/2023-risks/m10-insufficient-cryptography.html",
        "hints": [
            "This risk involves using outdated or weak cryptographic algorithms and keys.",
            "Failing to use secure key management practices can compromise data security.",
            "Ensuring the use of up-to-date cryptographic standards can mitigate this risk.",
            "Improper implementation of cryptographic libraries can result in vulnerabilities.",
            "Weak or hardcoded cryptographic keys can easily be compromised by attackers."
        ]
    },
    {
        "id": "CICD-SEC-1",
        "name": "Insufficient Flow Control Mechanisms",
        "hints": [
            "This risk involves inadequate checks or controls on the flow of CI/CD pipelines.",
            "Without proper flow control, malicious changes can propagate unchecked.",
            "This category highlights the need for defined approval processes.",
            "It's crucial to have proper segregation of duties in pipeline stages.",
            "Monitoring and alerting are essential to detect unauthorized changes."
        ],
        "link": "https://owasp.org/www-project-top-10-ci-cd-security-risks/CICD-SEC-01-Insufficient-Flow-Control-Mechanisms"
    },
    {
        "id": "CICD-SEC-2",
        "name": "Inadequate Identity and Access Management",
        "hints": [
            "This risk refers to insufficient control over who can access CI/CD systems.",
            "Proper identity management helps prevent unauthorized access.",
            "Multi-factor authentication is a key measure to mitigate this risk.",
            "The risk increases when access permissions are overly permissive.",
            "Auditing user activities can help identify potential misuse."
        ],
        "link": "https://owasp.org/www-project-top-10-ci-cd-security-risks/CICD-SEC-02-Inadequate-Identity-And-Access-Management"
    },
    {
        "id": "CICD-SEC-3",
        "name": "Dependency Chain Abuse",
        "hints": [
            "This risk involves exploiting dependencies within CI/CD pipelines.",
            "Compromised dependencies can lead to the execution of malicious code.",
            "Regularly updating and verifying dependencies is critical.",
            "Dependency confusion attacks exploit misconfigurations in package managers.",
            "Using signed dependencies can help mitigate this risk."
        ],
        "link": "https://owasp.org/www-project-top-10-ci-cd-security-risks/CICD-SEC-03-Dependency-Chain-Abuse"
    },
    {
        "id": "CICD-SEC-4",
        "name": "Poisoned Pipeline Execution (PPE)",
        "hints": [
            "PPE occurs when an attacker injects malicious steps into CI/CD pipelines.",
            "Unauthorized access to pipeline configuration is often the cause.",
            "Pipeline steps should be reviewed and audited regularly.",
            "Isolation of pipeline environments can help mitigate PPE risks.",
            "Maintaining version control over pipeline scripts adds security."
        ],
        "link": "https://owasp.org/www-project-top-10-ci-cd-security-risks/CICD-SEC-04-Poisoned-Pipeline-Execution"
    },
    {
        "id": "CICD-SEC-5",
        "name": "Insufficient PBAC (Pipeline-Based Access Controls)",
        "hints": [
            "PBAC refers to managing who can initiate and modify pipelines.",
            "Lack of PBAC can lead to unauthorized changes in pipeline executions.",
            "Only authorized personnel should have access to modify pipelines.",
            "Pipeline roles and responsibilities should be clearly defined.",
            "Audit trails are crucial to track changes in pipeline configurations."
        ],
        "link": "https://owasp.org/www-project-top-10-ci-cd-security-risks/CICD-SEC-05-Insufficient-PBAC"
    },
    {
        "id": "CICD-SEC-6",
        "name": "Insufficient Credential Hygiene",
        "hints": [
            "This risk involves improper management of credentials within pipelines.",
            "Hardcoded secrets and environment variables can be exploited if exposed.",
            "Secrets management solutions can help mitigate this risk.",
            "Regularly rotating credentials adds an extra layer of security.",
            "Monitoring for credential misuse is key to preventing breaches."
        ],
        "link": "https://owasp.org/www-project-top-10-ci-cd-security-risks/CICD-SEC-06-Insufficient-Credential-Hygiene"
    },
    {
        "id": "CICD-SEC-7",
        "name": "Insecure System Configuration",
        "hints": [
            "Insecure configurations can lead to vulnerabilities in CI/CD systems.",
            "Default settings should be changed to more secure configurations.",
            "Misconfigured tools or services may expose sensitive information.",
            "Configuration management and automation help maintain secure settings.",
            "Regular security audits can identify and rectify misconfigurations."
        ],
        "link": "https://owasp.org/www-project-top-10-ci-cd-security-risks/CICD-SEC-07-Insecure-System-Configuration"
    },
    {
        "id": "CICD-SEC-8",
        "name": "Ungoverned Usage of 3rd Party Services",
        "hints": [
            "Using third-party services without proper governance can introduce risks.",
            "Third-party services should be assessed for security before integration.",
            "Regularly review third-party access and permissions.",
            "Establish contracts with third-party providers that include security clauses.",
            "Monitor third-party service activities for unusual behavior."
        ],
        "link": "https://owasp.org/www-project-top-10-ci-cd-security-risks/CICD-SEC-08-Ungoverned-Usage-of-3rd-Party-Services"
    },
    {
        "id": "CICD-SEC-9",
        "name": "Improper Artifact Integrity Validation",
        "hints": [
            "Artifacts not properly validated can lead to compromised deployments.",
            "Ensure artifacts are signed and checksums are verified.",
            "Automated integrity checks should be part of the deployment process.",
            "Secure storage of artifacts helps maintain integrity.",
            "Only authorized personnel should have access to deploy artifacts."
        ],
        "link": "https://owasp.org/www-project-top-10-ci-cd-security-risks/CICD-SEC-09-Improper-Artifact-Integrity-Validation"
    },
    {
        "id": "CICD-SEC-10",
        "name": "Insufficient Logging and Visibility",
        "hints": [
            "Without proper logging, detecting and responding to incidents is challenging.",
            "Logs should be centralized and protected from tampering.",
            "Set up alerts for critical events and anomalies in the CI/CD pipeline.",
            "Ensure logs include sufficient detail to trace actions.",
            "Regularly review and maintain logging configurations."
        ],
        "link": "https://owasp.org/www-project-top-10-ci-cd-security-risks/CICD-SEC-10-Insufficient-Logging-And-Visibility"
    },
    {
        "id": "API1:2023",
        "name": "Broken Object Level Authorization",
        "link": "https://owasp.org/API-Security/editions/2023/en/0xa1-broken-object-level-authorization/",
        "hints": [
            "APIs tend to expose endpoints that handle object identifiers, creating a wide attack surface of Object Level Access Control issues.",
            "Object level authorization checks should be considered in every function that accesses a data source using an ID from the user.",
            "Failing to properly verify that the authenticated user is authorized to access a specific object or resource can lead to unauthorized access.",
            "Attackers can exploit this vulnerability to gain access to sensitive data or perform actions they are not meant to perform.",
            "Implementing proper object-level authorization checks and validating user permissions at the server-side can help mitigate this risk."
        ]
    },
    {
        "id": "API2:2023",
        "name": "Broken Authentication",
        "link": "https://owasp.org/API-Security/editions/2023/en/0xa2-broken-authentication/",
        "hints": [
            "Authentication mechanisms are often implemented incorrectly, allowing attackers to compromise authentication tokens or to exploit implementation flaws to assume other user's identities temporarily or permanently.",
            "Compromising a system's ability to identify the client/user, compromises API security overall.",
            "Weak or easily guessable passwords, lack of multi-factor authentication, and improper session management are common causes of this vulnerability.",
            "Implementing strong password policies, enforcing multi-factor authentication, and properly handling user sessions can help mitigate this risk.",
            "Regularly reviewing and testing the application's authentication logic is crucial to identify and address any weaknesses."
        ]
    },
    {
        "id": "API3:2023",
        "name": "Broken Object Property Level Authorization",
        "link": "https://owasp.org/API-Security/editions/2023/en/0xa3-broken-object-property-level-authorization/",
        "hints": [
            "This category combines API3:2019 Excessive Data Exposure and API6:2019 - Mass Assignment, focusing on the root cause: the lack of or improper authorization validation at the object property level.",
            "This leads to information exposure or manipulation by unauthorized parties.",
            "Failing to properly validate user permissions at the object property level can result in sensitive data being exposed or modified by unauthorized users.",
            "Implementing fine-grained object property-level authorization checks can help prevent this vulnerability.",
            "Regularly reviewing and testing the application's authorization logic, including object property-level permissions, is crucial to identify and address any weaknesses."
        ]
    },
    {
        "id": "API4:2023",
        "name": "Unrestricted Resource Consumption",
        "link": "https://owasp.org/API-Security/editions/2023/en/0xa4-unrestricted-resource-consumption/",
        "hints": [
            "Satisfying API requests requires resources such as network bandwidth, CPU, memory, and storage. Other resources such as emails/SMS/phone calls or biometrics validation are made available by service providers via API integrations, and paid for per request.",
            "Successful attacks can lead to Denial of Service or an increase of operational costs.",
            "Lack of rate limiting and resource quotas can allow attackers to overwhelm the API with excessive requests, leading to service disruptions and availability issues.",
            "Implementing rate limiting, resource quotas, and circuit breakers can help mitigate this risk and ensure the API's availability and reliability.",
            "Regularly monitoring and analyzing API usage patterns can help identify and address any resource or rate limiting weaknesses."
        ]
    },
    {
        "id": "API5:2023",
        "name": "Broken Function Level Authorization",
        "link": "https://owasp.org/API-Security/editions/2023/en/0xa5-broken-function-level-authorization/",
        "hints": [
            "Complex access control policies with different hierarchies, groups, and roles, and an unclear separation between administrative and regular functions, tend to lead to authorization flaws.",
            "By exploiting these issues, attackers can gain access to other users' resources and/or administrative functions.",
            "Failing to properly verify that the authenticated user is authorized to access a specific function or operation can lead to unauthorized access.",
            "Implementing proper function-level authorization checks and validating user permissions at the server-side can help mitigate this risk.",
            "Regularly reviewing and testing the application's authorization logic, including function-level permissions, is crucial to identify and address any weaknesses."
        ]
    },
    {
        "id": "API6:2023",
        "name": "Unrestricted Access to Sensitive Business Flows",
        "link": "https://owasp.org/API-Security/editions/2023/en/0xa6-unrestricted-access-to-sensitive-business-flows/",
        "hints": [
            "APIs vulnerable to this risk expose a business flow - such as buying a ticket, or posting a comment - without compensating for how the functionality could harm the business if used excessively in an automated manner.",
            "This doesn't necessarily come from implementation bugs.",
            "Attackers can exploit this vulnerability to perform unauthorized actions or gain access to sensitive business functionality.",
            "Implementing proper access controls and rate limiting for sensitive business flows can help mitigate this risk.",
            "Regularly reviewing and testing the application's business flow logic and access controls is crucial to identify and address any weaknesses."
        ]
    },
    {
        "id": "API7:2023",
        "name": "Server Side Request Forgery",
        "link": "https://owasp.org/API-Security/editions/2023/en/0xa7-server-side-request-forgery/",
        "hints": [
            "Server-Side Request Forgery (SSRF) flaws can occur when an API is fetching a remote resource without validating the user-supplied URI.",
            "This enables an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall or a VPN.",
            "Failing to properly validate and sanitize user-supplied URLs can lead to SSRF vulnerabilities.",
            "Attackers can exploit SSRF flaws to gain unauthorized access to internal resources or perform other malicious actions.",
            "Implementing robust input validation and restricting access to sensitive internal resources can help mitigate SSRF risks."
        ]
    },
    {
        "id": "API8:2023",
        "name": "Security Misconfiguration",
        "link": "https://owasp.org/API-Security/editions/2023/en/0xa8-security-misconfiguration/",
        "hints": [
            "APIs and the systems supporting them typically contain complex configurations, meant to make the APIs more customizable.",
            "Software and DevOps engineers can miss these configurations, or don't follow security best practices when it comes to configuration, opening the door for different types of attacks.",
            "Insecure default configurations, unused features, outdated components, and improper error handling are common causes of this vulnerability.",
            "Implementing secure default configurations, regularly updating components, and properly handling errors can help mitigate this risk.",
            "Regularly reviewing and testing the application's security configurations, including infrastructure and third-party components, is crucial to identify and address any weaknesses."
        ]
    },
    {
        "id": "API9:2023",
        "name": "Improper Inventory Management",
        "link": "https://owasp.org/API-Security/editions/2023/en/0xa9-improper-inventory-management/",
        "hints": [
            "APIs tend to expose more endpoints than traditional web applications, making proper and updated documentation highly important.",
            "A proper inventory of hosts and deployed API versions also are important to mitigate issues such as deprecated API versions and exposed debug endpoints.",
            "Lack of visibility and control over the API inventory can lead to security vulnerabilities and increased attack surface.",
            "Maintaining a comprehensive API inventory, including documentation and version management, can help identify and address security risks.",
            "Regularly reviewing and updating the API inventory, as well as monitoring for changes, is crucial to ensure the security of the API ecosystem."
        ]
    },
    {
        "id": "API10:2023",
        "name": "Unsafe Consumption of APIs",
        "link": "https://owasp.org/API-Security/editions/2023/en/0xaa-unsafe-consumption-of-apis/",
        "hints": [
            "Developers tend to trust data received from third-party APIs more than user input, and so tend to adopt weaker security standards.",
            "In order to compromise APIs, attackers go after integrated third-party services instead of trying to compromise the target API directly.",
            "Failing to properly validate and sanitize data received from third-party APIs can lead to security vulnerabilities.",
            "Attackers may exploit weaknesses in integrated third-party services to gain unauthorized access or perform malicious actions.",
            "Implementing comprehensive security measures, including input validation and secure API consumption practices, can help mitigate the risks of unsafe API consumption."
        ]
    }
]
